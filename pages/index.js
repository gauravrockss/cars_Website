import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import Hero from '@/components/Hero';
import {
    Autocomplete,
    Box,
    Button,
    Container,
    FilledInput,
    FormControl,
    Grid,
    IconButton,
    InputAdornment,
    InputLabel,
    OutlinedInput,
    Skeleton,
    TextField,
    Typography,
} from '@mui/material';
import BuildIcon from '@mui/icons-material/Build';
import TimeToLeaveIcon from '@mui/icons-material/TimeToLeave';
import { useCallback, useEffect, useState } from 'react';
import { manufacturersData } from '@/Services/Data';
import axios from 'axios';
import CarCard from '@/components/CarCard';
import { useRouter, useSearchParams } from 'next/navigation';
import { Man } from '@mui/icons-material';

export default function Home() {
    const [carDetails, setCarDetails] = useState(null);
    const [carManufacturer, setcarManufacturer] = useState('audi');
    const [carModel, setcarModel] = useState('');

    const router = useRouter();

    const fetchingDetails = useCallback(
        async function (carModel = 'q3', carManufacturer = 'audi') {
            const Headers = {
                'X-RapidAPI-Key':
                    '594984ebefmsh0576efdb17b478ep16cd39jsn7fe7437fca15',
                'X-RapidAPI-Host': 'cars-by-api-ninjas.p.rapidapi.com',
            };

            try {
                const response = await axios.get(
                    `https://cars-by-api-ninjas.p.rapidapi.com/v1/cars?make=${carManufacturer}&model=${carModel}&limit=${12}`,
                    { headers: Headers }
                );

                setCarDetails(response.data);
            } catch (error) {
                console.error(error);
            }
        },
        [setCarDetails]
    );

    useEffect(() => {
        fetchingDetails();
    }, [fetchingDetails]);

    const isDataEmpty =
        !Array.isArray(carDetails) || carDetails.length < 1 || !carDetails;

    const handleSearch = (e) => {
        e.preventDefault();
        if (carManufacturer === '' && carModel === '') {
            alert('please fill the Search bar');
        }

        fetchingDetails(carModel, carManufacturer);
    };

    // const upadateSerachParams = () => {
    //     const searchParams = new URLSearchParams(window.location.search);

    //     if (carManufacturer) {
    //         searchParams.set('manufacture', carManufacturer);
    //     } else {
    //         searchParams.delete('manufacture');
    //     }
    //     if (carModel) {
    //         searchParams.set('model', carModel);
    //     } else {
    //         searchParams.delete('model');
    //     }

    //     const newPathname = `${
    //         window.location.pathname
    //     }?${searchParams.toString()}`;

    //     router.push(newPathname);
    // };
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <meta
                    name='viewport'
                    content='width=device-width, initial-scale=1'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <Hero />
            <Box my={10} sx={{ px: { md: 0, xs: 4 } }}>
                <Container maxWidth='xl'>
                    <form onSubmit={handleSearch}>
                        <Grid
                            container
                            display='flex'
                            spacing={3}
                            alignItems='center'
                        >
                            <Grid item lg={4} md={12}>
                                <Typography
                                    variant='h4'
                                    sx={{
                                        fontWeight: 'bold',
                                    }}
                                >
                                    Car Catalogue
                                </Typography>
                            </Grid>
                            <Grid
                                item
                                lg={5}
                                xs={12}
                                sx={{ display: { sm: 'flex', xs: 'block' } }}
                                gap={2}
                            >
                                <Autocomplete
                                    freeSolo
                                    id='free-solo-2-demo'
                                    sx={{ width: 300 }}
                                    disableClearable
                                    options={manufacturersData}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label='Manufacture'
                                            onChange={(e) =>
                                                setcarManufacturer(
                                                    e.target.value
                                                )
                                            }
                                            InputProps={{
                                                ...params.InputProps,
                                                type: 'search',
                                            }}
                                        />
                                    )}
                                />

                                <TextField
                                    onChange={(e) =>
                                        setcarModel(e.target.value)
                                    }
                                />
                                <IconButton type='submit'>
                                    <Image
                                        src='/magnifying-glass.svg'
                                        alt='glass'
                                        width={40}
                                        height={40}
                                        objectFit='contain'
                                    />
                                </IconButton>
                            </Grid>
                        </Grid>
                    </form>
                    <Box mt={5}>
                        {!isDataEmpty ? (
                            <Box>
                                <Grid container spacing={2}>
                                    {carDetails.map((car, i) => (
                                        <Grid
                                            item
                                            lg={3}
                                            md={6}
                                            xs={12}
                                            key={i}
                                        >
                                            <CarCard car={car} />
                                        </Grid>
                                    ))}
                                </Grid>
                            </Box>
                        ) : (
                            <Skeleton
                                variant='rounded'
                                // width={210}
                                height={480}
                            />
                        )}
                    </Box>
                </Container>
            </Box>
        </>
    );
}
